{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var country = _ref.country,\n        defaultCountry = _ref.defaultCountry,\n        useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n        value = _ref.value,\n        onChange = _ref.onChange,\n        metadata = _ref.metadata,\n        smartCaret = _ref.smartCaret,\n        international = _ref.international,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"smartCaret\", \"international\"]);\n\n    var getInitialParsedInput = function getInitialParsedInput() {\n      return getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata);\n    }; // This is only used to detect `country` property change.\n\n\n    var _useState = useState(country),\n        _useState2 = _slicedToArray(_useState, 2),\n        prevCountry = _useState2[0],\n        setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n    var _useState3 = useState(defaultCountry),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prevDefaultCountry = _useState4[0],\n        setPrevDefaultCountry = _useState4[1]; // `parsedInput` is the `value` passed to the `<input/>`.\n\n\n    var _useState5 = useState(getInitialParsedInput()),\n        _useState6 = _slicedToArray(_useState5, 2),\n        parsedInput = _useState6[0],\n        setParsedInput = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n    var _useState7 = useState(value),\n        _useState8 = _slicedToArray(_useState7, 2),\n        valueForParsedInput = _useState8[0],\n        setValueForParsedInput = _useState8[1]; // If `value` property has been changed externally\n    // then re-initialize the component.\n\n\n    useEffect(function () {\n      if (value !== valueForParsedInput) {\n        setValueForParsedInput(value);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [value]); // If the `country` has been changed then re-initialize the component.\n\n    useEffect(function () {\n      if (country !== prevCountry) {\n        setPrevCountry(country);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n    useEffect(function () {\n      if (defaultCountry !== prevDefaultCountry) {\n        setPrevDefaultCountry(defaultCountry);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [defaultCountry]); // Update the `value` after `valueForParsedInput` has been updated.\n\n    useEffect(function () {\n      if (valueForParsedInput !== value) {\n        onChange(valueForParsedInput);\n      }\n    }, [valueForParsedInput]);\n    var onParsedInputChange = useCallback(function (parsedInput) {\n      var value;\n\n      if (country) {\n        // Won't allow `+` in the beginning\n        // when a `country` has been specified.\n        if (parsedInput && parsedInput[0] === '+') {\n          parsedInput = parsedInput.slice(1);\n        }\n      } else if (!defaultCountry) {\n        // Force a `+` in the beginning of a `value`\n        // when no `country` and `defaultCountry` have been specified.\n        if (parsedInput && parsedInput[0] !== '+') {\n          parsedInput = '+' + parsedInput;\n        }\n      } // Convert `parsedInput` to `value`.\n\n\n      if (parsedInput) {\n        var asYouType = new AsYouType(country || defaultCountry, metadata);\n        asYouType.input(country && international ? \"+\".concat(getCountryCallingCode(country, metadata)).concat(parsedInput) : parsedInput);\n        var phoneNumber = asYouType.getNumber(); // If it's a \"possible\" incomplete phone number.\n\n        if (phoneNumber) {\n          value = phoneNumber.number;\n        }\n      }\n\n      setParsedInput(parsedInput);\n      setValueForParsedInput(value);\n    }, [country, international, defaultCountry, metadata, setParsedInput, setValueForParsedInput]);\n    var InputComponent = smartCaret ? InputSmart : InputBasic;\n    return React.createElement(InputComponent, _extends({}, rest, {\n      ref: ref,\n      metadata: metadata,\n      international: international,\n      country: country || defaultCountry,\n      value: parsedInput,\n      onChange: onParsedInputChange\n    }));\n  }\n\n  PhoneInput = React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n\n    /**\r\n     * The phone number (in E.164 format).\r\n     * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n     */\n    value: PropTypes.string,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (example: `(213) 373-4253`),\r\n     * or as an international phone number without \"country calling code\"\r\n     * if `international` property is passed (example: `213 373 4253`).\r\n     * Example: \"US\".\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (example: `+1 213 373 4253`)\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n     * The user can still input a phone number in international format.\r\n     * Example: \"US\".\r\n     * `country` and `defaultCountry` properties are mutually exclusive.\r\n     */\n    defaultCountry: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n\n    /**\r\n     * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n     * then the `value` will be formatted as a national phone number by default.\r\n     * To format the initial `value` of `defaultCountry` as an international number instead\r\n     * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n     */\n    useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * Set to `true` to force international phone number format\r\n     * (without \"country calling code\") when `country` is specified.\r\n     */\n    // international: false,\n\n    /**\r\n     * Prefer national format when formatting E.164 phone number `value`\r\n     * corresponding to `defaultCountry`.\r\n     */\n    useNationalFormatForDefaultCountryValue: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata) {\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new AsYouType(undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        console.error(\"[react-phone-number-input] Phone number \".concat(value, \" corresponds to country \").concat(phoneNumber.country, \" but \").concat(country, \" was specified instead.\"));\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return parseDigits(phoneNumber.formatNational());\n    } else {\n      if (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\n        return parseDigits(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}","map":{"version":3,"sources":["../source/PhoneInput.js"],"names":["country","defaultCountry","useNationalFormatForDefaultCountryValue","value","onChange","metadata","smartCaret","international","rest","getInitialParsedInput","getParsedInputForValue","prevCountry","setPrevCountry","useState","prevDefaultCountry","setPrevDefaultCountry","parsedInput","setParsedInput","valueForParsedInput","setValueForParsedInput","useEffect","onParsedInputChange","useCallback","asYouType","getCountryCallingCode","phoneNumber","InputComponent","PhoneInput","React","type","PropTypes","autoComplete","inputComponent","isRequired","defaultMetadata","createInput","console","parseDigits"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tmetadata,\r\n\t\tsmartCaret,\r\n\t\tinternational,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst getInitialParsedInput = () => getParsedInputForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// This is only used to detect `country` property change.\r\n\t\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t\t// This is only used to detect `defaultCountry` property change.\r\n\t\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t\t// `parsedInput` is the `value` passed to the `<input/>`.\r\n\t\tconst [parsedInput, setParsedInput] = useState(getInitialParsedInput())\r\n\t\t// This is only used to detect `value` property changes.\r\n\t\tconst [valueForParsedInput, setValueForParsedInput] = useState(value)\r\n\t\t// If `value` property has been changed externally\r\n\t\t// then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (value !== valueForParsedInput) {\r\n\t\t\t\tsetValueForParsedInput(value)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [value])\r\n\t\t// If the `country` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (country !== prevCountry) {\r\n\t\t\t\tsetPrevCountry(country)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [country])\r\n\t\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\t\tsetParsedInput(getInitialParsedInput())\r\n\t\t\t}\r\n\t\t}, [defaultCountry])\r\n\t\t// Update the `value` after `valueForParsedInput` has been updated.\r\n\t\tuseEffect(() => {\r\n\t\t\tif (valueForParsedInput !== value) {\r\n\t\t\t\tonChange(valueForParsedInput)\r\n\t\t\t}\r\n\t\t}, [valueForParsedInput])\r\n\t\tconst onParsedInputChange = useCallback((parsedInput) => {\r\n\t\t\tlet value\r\n\t\t\tif (country) {\r\n\t\t\t\t// Won't allow `+` in the beginning\r\n\t\t\t\t// when a `country` has been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] === '+') {\r\n\t\t\t\t\tparsedInput = parsedInput.slice(1)\r\n\t\t\t\t}\r\n\t\t\t} else if (!defaultCountry) {\r\n\t\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\t\tif (parsedInput && parsedInput[0] !== '+') {\r\n\t\t\t\t\tparsedInput = '+' + parsedInput\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Convert `parsedInput` to `value`.\r\n\t\t\tif (parsedInput) {\r\n\t\t\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\t\t\tasYouType.input(\r\n\t\t\t\t\tcountry && international ?\r\n\t\t\t\t\t`+${getCountryCallingCode(country, metadata)}${parsedInput}` :\r\n\t\t\t\t\tparsedInput\r\n\t\t\t\t)\r\n\t\t\t\tconst phoneNumber = asYouType.getNumber()\r\n\t\t\t\t// If it's a \"possible\" incomplete phone number.\r\n\t\t\t\tif (phoneNumber) {\r\n\t\t\t\t\tvalue = phoneNumber.number\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetParsedInput(parsedInput)\r\n\t\t\tsetValueForParsedInput(value)\r\n\t\t}, [\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\tdefaultCountry,\r\n\t\t\tmetadata,\r\n\t\t\tsetParsedInput,\r\n\t\t\tsetValueForParsedInput\r\n\t\t])\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\t\treturn (\r\n\t\t\t<InputComponent\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tinternational={international}\r\n\t\t\t\tcountry={country || defaultCountry}\r\n\t\t\t\tvalue={parsedInput}\r\n\t\t\t\tonChange={onParsedInputChange} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The phone number (in E.164 format).\r\n\t\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (example: `(213) 373-4253`),\r\n\t\t * or as an international phone number without \"country calling code\"\r\n\t\t * if `international` property is passed (example: `213 373 4253`).\r\n\t\t * Example: \"US\".\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (example: `+1 213 373 4253`)\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t\t * The user can still input a phone number in international format.\r\n\t\t * Example: \"US\".\r\n\t\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t\t */\r\n\t\tdefaultCountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t\t * then the `value` will be formatted as a national phone number by default.\r\n\t\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to force international phone number format\r\n\t\t * (without \"country calling code\") when `country` is specified.\r\n\t\t */\r\n\t\t// international: false,\r\n\r\n\t\t/**\r\n\t\t * Prefer national format when formatting E.164 phone number `value`\r\n\t\t * corresponding to `defaultCountry`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getParsedInputForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n) {\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tconsole.error(`[react-phone-number-input] Phone number ${value} corresponds to country ${phoneNumber.country} but ${country} was specified instead.`)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}